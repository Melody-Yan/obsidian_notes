/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var $=Object.defineProperty;var pe=Object.getOwnPropertyDescriptor;var ue=Object.getOwnPropertyNames;var ge=Object.prototype.hasOwnProperty;var fe=(o,t)=>{for(var e in t)$(o,e,{get:t[e],enumerable:!0})},Ce=(o,t,e,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of ue(t))!ge.call(o,s)&&s!==e&&$(o,s,{get:()=>t[s],enumerable:!(r=pe(t,s))||r.enumerable});return o};var Ee=o=>Ce($({},"__esModule",{value:!0}),o);var Me={};fe(Me,{default:()=>k});module.exports=Ee(Me);var E=require("obsidian");var y=require("obsidian");var m=function(o,t){if(!(this instanceof m))return new m(o,t);this.url=o,t=t||{},this.headers=t.headers||{},this.payload=t.payload!==void 0?t.payload:"",this.method=t.method||this.payload&&"POST"||"GET",this.withCredentials=!!t.withCredentials,this.debug=!!t.debug,this.FIELD_SEPARATOR=":",this.listeners={},this.xhr=null,this.readyState=m.INITIALIZING,this.progress=0,this.chunk="",this.lastEventId="",this.addEventListener=function(e,r){this.listeners[e]===void 0&&(this.listeners[e]=[]),this.listeners[e].indexOf(r)===-1&&this.listeners[e].push(r)},this.removeEventListener=function(e,r){if(this.listeners[e]===void 0)return;let s=[];this.listeners[e].forEach(function(a){a!==r&&s.push(a)}),s.length===0?delete this.listeners[e]:this.listeners[e]=s},this.dispatchEvent=function(e){if(!e)return!0;this.debug&&console.debug(e),e.source=this;let r="on"+e.type;return this.hasOwnProperty(r)&&(this[r].call(this,e),e.defaultPrevented)?!1:this.listeners[e.type]?this.listeners[e.type].every(function(s){return s(e),!e.defaultPrevented}):!0},this._markClosed=function(){this.xhr=null,this._setReadyState(m.CLOSED)},this._setReadyState=function(e){let r=new CustomEvent("readystatechange");r.readyState=e,this.readyState=e,this.dispatchEvent(r)},this._onStreamFailure=function(e){let r=new CustomEvent("error");r.responseCode=e.currentTarget.status,r.data=e.currentTarget.response,this.dispatchEvent(r),this._markClosed()},this._onStreamAbort=function(){this.dispatchEvent(new CustomEvent("abort")),this._markClosed()},this._onStreamProgress=function(e){if(!this.xhr)return;if(this.xhr.status<200||this.xhr.status>=300){this._onStreamFailure(e);return}let r=this.xhr.responseText.substring(this.progress);this.progress+=r.length;let s=(this.chunk+r).split(/(\r\n\r\n|\r\r|\n\n)/g),a=s.pop();s.forEach(function(i){i.trim().length>0&&this.dispatchEvent(this._parseEventChunk(i))}.bind(this)),this.chunk=a},this._onStreamLoaded=function(e){this._onStreamProgress(e),this.dispatchEvent(this._parseEventChunk(this.chunk)),this.chunk="",this._markClosed()},this._parseEventChunk=function(e){if(!e||e.length===0)return null;this.debug&&console.debug(e);let r={id:null,retry:null,data:null,event:null};e.split(/\n|\r\n|\r/).forEach(function(a){let i=a.indexOf(this.FIELD_SEPARATOR),n,l;if(i>0){let h=a[i+1]===" "?2:1;n=a.substring(0,i),l=a.substring(i+h)}else if(i<0)n=a,l="";else return;n in r&&(n==="data"&&r[n]!==null?r.data+=`
`+l:r[n]=l)}.bind(this)),r.id!==null&&(this.lastEventId=r.id);let s=new CustomEvent(r.event||"message");return s.id=r.id,s.data=r.data||"",s.lastEventId=this.lastEventId,s},this._onReadyStateChange=function(){if(this.xhr&&this.xhr.readyState===XMLHttpRequest.HEADERS_RECEIVED){let e={},r=this.xhr.getAllResponseHeaders().trim().split(`\r
`);for(let a of r){let[i,...n]=a.split(":"),l=n.join(":").trim();e[i.trim().toLowerCase()]=e[i.trim().toLowerCase()]||[],e[i.trim().toLowerCase()].push(l)}let s=new CustomEvent("open");s.responseCode=this.xhr.status,s.headers=e,this.dispatchEvent(s),this._setReadyState(m.OPEN)}},this.stream=function(){if(!this.xhr){this._setReadyState(m.CONNECTING),this.xhr=new XMLHttpRequest,this.xhr.addEventListener("progress",this._onStreamProgress.bind(this)),this.xhr.addEventListener("load",this._onStreamLoaded.bind(this)),this.xhr.addEventListener("readystatechange",this._onReadyStateChange.bind(this)),this.xhr.addEventListener("error",this._onStreamFailure.bind(this)),this.xhr.addEventListener("abort",this._onStreamAbort.bind(this)),this.xhr.open(this.method,this.url);for(let e in this.headers)this.xhr.setRequestHeader(e,this.headers[e]);this.lastEventId.length>0&&this.xhr.setRequestHeader("Last-Event-ID",this.lastEventId),this.xhr.withCredentials=this.withCredentials,this.xhr.send(this.payload)}},this.close=function(){this.readyState!==m.CLOSED&&this.xhr.abort()},(t.start===void 0||t.start)&&this.stream()};m.INITIALIZING=-1;m.CONNECTING=0;m.OPEN=1;m.CLOSED=2;typeof exports!="undefined"&&(exports.SSE=m);var H="__chatgpt_plugin",_="user",B="assistant",x="chatFolder",U="chatTemplateFolder";var M=`<hr class="${H}">`,J=`=begin-chatgpt-md-comment

`,K="=end-chatgpt-md-comment",q=0;var W="call-chatgpt-api",j="add-hr",Z="add-comment-block",z="stop-streaming",X="infer-title",Q="move-to-chat",ee="choose-chat-template",te="clear-chat";var v=o=>{let e=(o.match(/```/g)||[]).length%2!==0;return e&&console.log("[ChatGPT MD] Unclosed code block detected"),e},re=o=>{try{return o.split(M)}catch(t){throw new Error("Error splitting messages"+t)}},se=o=>{if(!o)return o;let t=/---\s*[\s\S]*?\s*---/g;try{return o.replace(t,"").trim()}catch(e){throw new Error(`Failed to remove YAML Front Matter: ${e instanceof Error?e.message:"Unknown error"}`)}},ne=o=>{let t="role::";try{if(!o.includes(t))return{role:_,content:o};let[e,...r]=o.split(t)[1].split(`
`);return{role:e.trim(),content:r.join(`
`).trim()}}catch(e){throw new Error(`Failed to extract role and message: ${e}`)}},ae=o=>{try{let t=/=begin-chatgpt-md-comment[\s\S]*?=end-chatgpt-md-comment/g;return o.replace(t,"")}catch(t){throw new Error("Error removing comments from messages"+t)}},Te=o=>{let t=o.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&").replace("YYYY","\\d{4}").replace("MM","\\d{2}").replace("DD","\\d{2}").replace("hh","\\d{2}").replace("mm","\\d{2}").replace("ss","\\d{2}");return new RegExp(`^${t}$`)},ie=(o,t)=>{try{let e=Te(t);return(o==null?void 0:o.length)==t.length&&e.test(o)}catch(e){throw new Error("Error checking if title is in timestamp format"+e)}},I=o=>o===0?"":o>6?"#".repeat(6)+" ":"#".repeat(o)+" ",oe=o=>{let e=o.replace(/^---\n/,"").replace(/\n---$/,"").split(`
`),r={};for(let s of e){if(!s.trim())continue;let[a,...i]=s.split(":"),n=i.join(":").trim();n.startsWith("[")&&n.endsWith("]")?r[a.trim()]=n.slice(1,-1).split(",").map(l=>{let h=l.trim();return h.startsWith("'")&&h.endsWith("'")?h.slice(1,-1):h}):n==="true"?r[a.trim()]=!0:n==="false"?r[a.trim()]=!1:n==="null"?r[a.trim()]=null:isNaN(Number(n))?r[a.trim()]=n:r[a.trim()]=Number(n)}return r};var N=class{constructor(){this.sse=null;this.manualClose=!1;this.stopStreaming=()=>{if(y.Platform.isMobile){new y.Notice("[ChatGPT MD] Mobile not supported.");return}this.sse&&(this.manualClose=!0,this.sse.close(),console.log("[ChatGPT MD] SSE manually closed"),this.sse=null)};this.streamSSE=async(t,e,r,s,a,i)=>new Promise((n,l)=>{try{console.log("[ChatGPT MD] streamSSE",s);let h=new m(r,{headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},method:"POST",payload:JSON.stringify(s)});this.sse=h;let u="",T=t.getCursor().ch,D=t.getCursor().line;h.addEventListener("open",g=>{console.log("[ChatGPT MD] SSE Opened");let S=`

${M}

${i}role::assistant

`;t.replaceRange(S,t.getCursor());let C=t.getCursor(),w={line:C.line,ch:C.ch+S.length};t.setCursor(w),T=w.ch,D=w.line}),h.addEventListener("message",g=>{if(g.data!="[DONE]"){let C=JSON.parse(g.data).choices[0].delta.content;if(!C)return;let w=t.getCursor(),Y=t.posToOffset(w),V=t.cm,de=V.state.update({changes:{from:Y,to:Y,insert:C}});V.dispatch(de),u+=C;let me={line:w.line,ch:w.ch+C.length};t.setCursor(me)}else{h.close(),console.log("[ChatGPT MD] SSE Closed"),v(u)&&(u+="\n```");let S=t.getCursor();t.replaceRange(u,{line:D,ch:T},S);let C={line:D,ch:T+u.length};t.setCursor(C),a?new y.Notice("[ChatGPT MD] Text pasted at cursor may leave artifacts. Please remove them manually. ChatGPT MD cannot safely remove text when pasting at cursor."):t.replaceRange("",C,{line:1/0,ch:1/0}),n(u)}}),h.addEventListener("abort",g=>{console.log("[ChatGPT MD] SSE Closed Event"),this.manualClose&&n(u)}),h.addEventListener("error",g=>{try{console.log("[ChatGPT MD] SSE Error: ",JSON.parse(g.data)),h.close(),console.log("[ChatGPT MD] SSE Closed"),l(JSON.parse(g.data))}catch(S){console.log("[ChatGPT MD] Unknown Error: ",g),h.close(),console.log("[ChatGPT MD] SSE Closed"),l(g)}}),h.stream()}catch(h){console.log("SSE Error",h),l(h)}})}};var p=require("obsidian");var d=require("obsidian");var c={frequency_penalty:.5,max_tokens:300,model:"gpt-4o-mini",n:1,presence_penalty:.5,stop:null,stream:!0,system_commands:null,tags:[],temperature:.3,title:"Untitled",top_p:1,url:"https://api.openai.com/v1/chat/completions"},O=class{constructor(t){this.streamManager=t}async callOpenAIAPI(t,e,r={},s=c.stream,a,i,n){let l={...c,...r};return s&&i?this.callStreamingAPI(t,e,l,i,a,n):this.callNonStreamingAPI(t,e,l)}async callStreamingAPI(t,e,r,s,a,i=!1){try{return{fullstr:await this.streamManager.streamSSE(s,t,r.url,{model:r.model,messages:e,max_completion_tokens:r.max_tokens,temperature:r.temperature,top_p:r.top_p,presence_penalty:r.presence_penalty,frequency_penalty:r.frequency_penalty,stream:r.stream,stop:r.stop,n:r.n},i,a),mode:"streaming"}}catch(n){throw n instanceof Object?n.error?(new d.Notice(`[ChatGPT MD] Stream = True Error :: ${n.error.message}`),new Error(JSON.stringify(n.error))):r.url!==c.url?(new d.Notice("[ChatGPT MD] Issue calling specified url: "+r.url),new Error("[ChatGPT MD] Issue calling specified url: "+r.url)):(new d.Notice(`[ChatGPT MD] Error :: ${JSON.stringify(n)}`),new Error(JSON.stringify(n))):(new d.Notice(`issue calling ${r.model}, see console for more details`),new Error("issue calling OpenAI API, see error for more details: "+n))}}async callNonStreamingAPI(t,e,r){try{let s=await(0,d.requestUrl)({url:r.url,method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify({model:r.model,messages:e,max_completion_tokens:r.max_tokens,temperature:r.temperature,top_p:r.top_p,presence_penalty:r.presence_penalty,frequency_penalty:r.frequency_penalty,stream:r.stream,stop:r.stop,n:r.n}),throw:!1});try{let n=s.json;if(n&&n.error)throw new d.Notice(`[ChatGPT MD] Stream = False Error :: ${n.error.message}`),new Error(JSON.stringify(n.error))}catch(n){if(!(n instanceof SyntaxError))throw new Error(n)}let a=s.text;return JSON.parse(a).choices[0].message.content}catch(s){throw s instanceof Object?s.error?(new d.Notice(`[ChatGPT MD] Error :: ${s.error.message}`),new Error(JSON.stringify(s.error))):r.url!==c.url?(new d.Notice("[ChatGPT MD] Issue calling specified url: "+r.url),new Error("[ChatGPT MD] Issue calling specified url: "+r.url)):(new d.Notice(`[ChatGPT MD] Error :: ${JSON.stringify(s)}`),new Error(JSON.stringify(s))):(new d.Notice(`issue calling ${r.model}, see console for more details`),new Error("issue calling OpenAI API, see error for more details: "+s))}}},le=async(o,t,e)=>{try{if(t.length<2)return new d.Notice("Not enough messages to infer title. Minimum 2 messages."),"";let r=`Infer title from the summary of the content of these messages. The title **cannot** contain any of the following characters: colon, back slash or forward slash. Just return the title. Write the title in ${e}. 
Messages:

${JSON.stringify(t)}`,s=[{role:_,content:r}],i=(await(0,d.requestUrl)({url:c.url,method:"POST",headers:{Authorization:`Bearer ${o}`,"Content-Type":"application/json"},contentType:"application/json",body:JSON.stringify({model:c.model,messages:s}),throw:!1})).text;return JSON.parse(i).choices[0].message.content.replace(/[:/\\]/g,"").replace("Title","").replace("title","").trim()}catch(r){throw new d.Notice("[ChatGPT MD] Error inferring title from messages"),new Error("[ChatGPT MD] Error inferring title from messages"+r)}};var F=`---
system_commands: ['I am a helpful assistant.']
temperature: ${c.temperature}
top_p: ${c.top_p}
max_tokens: ${c.max_tokens}
presence_penalty: ${c.presence_penalty}
frequency_penalty: ${c.frequency_penalty}
stream: ${c.stream}
stop: ${c.stop}
n: ${c.n}
model: ${c.model}
---`,he={apiKey:"default",defaultChatFrontmatter:F,stream:!0,chatTemplateFolder:"ChatGPT_MD/templates",chatFolder:"ChatGPT_MD/chats",generateAtCursor:!1,autoInferTitle:!1,dateFormat:"YYYYMMDDhhmmss",headingLevel:0,inferTitleLanguage:"English"};var L=class extends p.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Settings for ChatGPT MD: Keep tokens in mind! You can see if your text is longer than the token limit (4096) here:"}),t.createEl("a",{text:"https://platform.openai.com/tokenizer",href:"https://platform.openai.com/tokenizer"}),new p.Setting(t).setName("OpenAI API Key").setDesc("API Key for OpenAI").addText(e=>e.setPlaceholder("some-api-key").setValue(this.plugin.settings.apiKey).onChange(async r=>{this.plugin.settings.apiKey=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Default Chat Frontmatter").setDesc("Default frontmatter for new chat files. You can change/use all of the settings exposed by the OpenAI API here: https://platform.openai.com/docs/api-reference/chat/create").addTextArea(e=>e.setPlaceholder(F).setValue(this.plugin.settings.defaultChatFrontmatter||F).onChange(async r=>{this.plugin.settings.defaultChatFrontmatter=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Stream").setDesc("Stream responses from OpenAI").addToggle(e=>e.setValue(this.plugin.settings.stream).onChange(async r=>{this.plugin.settings.stream=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Chat Folder").setDesc("Path to folder for chat files").addText(e=>e.setValue(this.plugin.settings.chatFolder).onChange(async r=>{this.plugin.settings.chatFolder=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Chat Template Folder").setDesc("Path to folder for chat file templates").addText(e=>e.setPlaceholder("chat-templates").setValue(this.plugin.settings.chatTemplateFolder).onChange(async r=>{this.plugin.settings.chatTemplateFolder=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Generate at Cursor").setDesc("Generate text at cursor instead of end of file").addToggle(e=>e.setValue(this.plugin.settings.generateAtCursor).onChange(async r=>{this.plugin.settings.generateAtCursor=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Automatically Infer Title").setDesc("Automatically infer title after 4 messages have been exchanged").addToggle(e=>e.setValue(this.plugin.settings.autoInferTitle).onChange(async r=>{this.plugin.settings.autoInferTitle=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Date Format").setDesc("Date format for chat files. Valid date blocks are: YYYY, MM, DD, hh, mm, ss").addText(e=>e.setPlaceholder("YYYYMMDDhhmmss").setValue(this.plugin.settings.dateFormat).onChange(async r=>{this.plugin.settings.dateFormat=r,await this.plugin.saveSettings()})),new p.Setting(t).setName("Heading Level").setDesc("Heading level for messages (example for heading level 2: '## role::user'). Valid heading levels are 0, 1, 2, 3, 4, 5, 6").addText(e=>e.setValue(this.plugin.settings.headingLevel.toString()).onChange(async r=>{this.plugin.settings.headingLevel=parseInt(r),await this.plugin.saveSettings()})),new p.Setting(t).setName("Infer title language").setDesc("Language to use for title inference.").addDropdown(e=>{e.addOptions({English:"English",Japanese:"Japanese",Spanish:"Spanish",French:"French",German:"German",Chinese:"Chinese",Korean:"Korean",Italian:"Italian",Russian:"Russian"}),e.setValue(this.plugin.settings.inferTitleLanguage),e.onChange(async r=>{this.plugin.settings.inferTitleLanguage=r,await this.plugin.saveSettings()})})}};var f=require("obsidian");var P=require("obsidian"),b=class extends P.Modal{constructor(t,e,r){super(t),this.folderName=e,this.folderPath=r,this.result=!1,this.modalPromise=new Promise(s=>{this.resolveModalPromise=s})}onOpen(){let{contentEl:t}=this;t.createEl("h2",{text:`[ChatGPT MD] No ${this.folderName} folder found.`}),t.createEl("p",{text:`If you choose "Yes, Create", the plugin will automatically create a folder at: ${this.folderPath}. You can change this path in the plugin settings.`}),new P.Setting(t).addButton(e=>e.setButtonText("Yes, Create Folder").setTooltip("Create folder").setCta().onClick(()=>{this.result=!0,this.resolveModalPromise(this.result),this.close()})),new P.Setting(t).addButton(e=>e.setButtonText("No, I'll create it myself").setTooltip("Cancel").setCta().onClick(()=>{this.result=!1,this.resolveModalPromise(this.result),this.close()}))}waitForModalValue(){return this.modalPromise}onClose(){let{contentEl:t}=this;t.empty()}};var ce=async(o,t,e,r)=>{let s=new b(o,e,r);s.open();let a=await s.waitForModalValue();return a?(console.log("[ChatGPT MD] Creating folder"),await t.createFolder(r)):console.log("[ChatGPT MD] Not creating folder"),a};var A=require("obsidian"),R=class extends A.SuggestModal{constructor(t,e,r){super(t),this.settings=e,this.titleDate=r}getFilesInChatFolder(){let t=this.app.vault.getAbstractFileByPath(this.settings.chatTemplateFolder);if(t!=null)return t.children;throw new A.Notice(`Error getting folder: ${this.settings.chatTemplateFolder}`),new Error(`Error getting folder: ${this.settings.chatTemplateFolder}`)}getSuggestions(t){let e=this.getFilesInChatFolder();return t==""?e.map(r=>({title:r.basename,file:r})):e.filter(r=>r.basename.toLowerCase().includes(t.toLowerCase())).map(r=>({title:r.basename,file:r}))}renderSuggestion(t,e){e.createEl("div",{text:t.title})}async onChooseSuggestion(t,e){new A.Notice(`Selected ${t.title}`);let r=await this.app.vault.read(t.file),s=await this.app.vault.create(`${this.settings.chatFolder}/${this.titleDate}.md`,r);await this.app.workspace.openLinkText(s.basename,"",!0)}};var G=class{constructor(t){this.app=t}async writeInferredTitle(t,e,r){try{let s=t.file;if(!s)throw new Error("No file is currently open");let a=e.replace(/\/$/,""),i=`${a}/${r}.md`,n=1;for(;await this.app.vault.adapter.exists(i);)i=`${a}/${r} (${n}).md`,n++;await this.ensureFolderExists(e,x),await this.app.fileManager.renameFile(s,i)}catch(s){throw new f.Notice("[ChatGPT MD] Error writing inferred title to editor"),console.log("[ChatGPT MD] Error writing inferred title to editor",s),s}}async ensureFolderExists(t,e){return!await this.app.vault.adapter.exists(t)&&!await ce(this.app,this.app.vault,e,t)?(new f.Notice(`[ChatGPT MD] No ${e} found. One must be created to use plugin. Set one in settings and make sure it exists.`),!1):!0}addHorizontalRule(t,e,r){let s=`

`,a=[s,`<hr class="${H}">`,s,`${I(r)}role::${e}`,s].join(""),i=t.getCursor();t.replaceRange(a,i);let n={line:i.line,ch:i.ch+a.length};t.setCursor(n)}async createNewChatWithHighlightedText(t,e){try{let r=t.getSelection();if(!e.chatFolder||e.chatFolder.trim()===""){new f.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.ensureFolderExists(e.chatFolder,x))return;let a=await this.app.vault.create(`${e.chatFolder}/${this.getDate(new Date,e.dateFormat)}.md`,`${e.defaultChatFrontmatter}

${r}`);await this.app.workspace.openLinkText(a.basename,"",!0,{state:{mode:"source"}});let i=this.app.workspace.getActiveViewOfType(f.MarkdownView);if(!i){new f.Notice("No active markdown editor found.");return}i.editor.focus(),this.moveCursorToEnd(i.editor)}catch(r){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",r),new f.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}appendMessage(t,e,r,s){let a=`

${M}

${I(s)}role::${e}

${r}

${M}

${I(s)}role::user

`;t.replaceRange(a,t.getCursor())}clearChat(t){try{let e=/---\s*[\s\S]*?\s*---/g,s=t.getValue().match(e);if(!s||s.length===0)throw new Error("No YAML frontmatter found in the document");let a=s[0];t.setValue(""),t.replaceRange(a,t.getCursor());let i={line:t.lastLine()+1,ch:0};t.setCursor(i)}catch(e){throw new Error(`Failed to clear conversation: ${e.message}`)}}moveCursorToEnd(t){try{let r={line:t.lastLine()+1,ch:0};t.setCursor(r)}catch(e){throw new Error("Error moving cursor to end of file"+e)}}getMessagesFromEditor(t,e){let r=se(t.getValue()),s=re(r);s=s.map(n=>ae(n));let a=s.map(n=>ne(n)),i=this.getFrontmatter(null,e,this.app);if(i.system_commands){let n=i.system_commands;a.unshift(...n.map(l=>({role:"developer",content:l})))}return{messages:s,messagesWithRole:a}}async createNewChatFromTemplate(t,e){if(!t.chatFolder||t.chatFolder.trim()===""){new f.Notice("[ChatGPT MD] No chat folder value found. Please set one in settings.");return}if(!await this.ensureFolderExists(t.chatFolder,x))return;if(!t.chatTemplateFolder||t.chatTemplateFolder.trim()===""){new f.Notice("[ChatGPT MD] No chat template folder value found. Please set one in settings.");return}await this.ensureFolderExists(t.chatTemplateFolder,U)&&new R(this.app,t,e).open()}getDate(t,e="YYYYMMDDhhmmss"){let r=t.getFullYear(),s=t.getMonth()+1,a=t.getDate(),i=t.getHours(),n=t.getMinutes(),l=t.getSeconds(),h=s.toString().padStart(2,"0"),u=a.toString().padStart(2,"0"),T=i.toString().padStart(2,"0"),D=n.toString().padStart(2,"0"),g=l.toString().padStart(2,"0");return e.replace("YYYY",r.toString()).replace("MM",h).replace("DD",u).replace("hh",T).replace("mm",D).replace("ss",g)}getFrontmatter(t,e,r){var n,l,h,u,T;let s=(t==null?void 0:t.file)||r.workspace.getActiveFile();if(!s)throw new Error("No active file found");let i={...oe(e.defaultChatFrontmatter),...((n=r.metadataCache.getFileCache(s))==null?void 0:n.frontmatter)||{}};return{...c,...i,stream:(h=(l=i.stream)!=null?l:e.stream)!=null?h:c.stream,title:(T=(u=t==null?void 0:t.file)==null?void 0:u.basename)!=null?T:c.title}}getHeadingPrefix(t){return t===q?"":t>6?"#".repeat(6)+" ":"#".repeat(t)+" "}async inferTitle(t,e,r,s,a){if(!e.file)throw new Error("No active file found");console.log("[ChatGPT MD] auto inferring title from messages");let i=await le(s,a,r.inferTitleLanguage);i?(console.log(`[ChatGPT MD] automatically inferred title: ${i}. Changing file name...`),await this.writeInferredTitle(e,r.chatFolder,i)):new f.Notice("[ChatGPT MD] Could not infer title",5e3)}async processResponse(t,e,r){let s=e;if(e.mode==="streaming"){s=e.fullstr;let a=`

${M}

${this.getHeadingPrefix(r.headingLevel)}role::user

`;t.replaceRange(a,t.getCursor());let i=t.getCursor(),n={line:i.line,ch:i.ch+a.length};t.setCursor(n)}else v(s)&&(s=s+"\n```"),this.appendMessage(t,B,s,r.headingLevel)}};var k=class extends E.Plugin{async onload(){this.statusBarItemEl=this.addStatusBarItem(),await this.loadSettings();let t=new N;this.openAIService=new O(t),this.editorService=new G(this.app),this.addCommand({id:W,name:"Chat",icon:"message-circle",editorCallback:async(e,r)=>{var a;let s=this.editorService.getFrontmatter(r,this.settings,this.app);try{this.updateStatusBar(`[ChatGPT MD] Calling ${s.model}`);let{messagesWithRole:i,messages:n}=this.editorService.getMessagesFromEditor(e,this.settings);this.settings.generateAtCursor||this.editorService.moveCursorToEnd(e),E.Platform.isMobile&&new E.Notice(`[ChatGPT MD] Calling ${s.model}`);let l=await this.openAIService.callOpenAIAPI(this.settings.apiKey,i,s,s.stream,this.editorService.getHeadingPrefix(this.settings.headingLevel),e,this.settings.generateAtCursor);await this.editorService.processResponse(e,l,this.settings),this.settings.autoInferTitle&&ie((a=r==null?void 0:r.file)==null?void 0:a.basename,this.settings.dateFormat)&&i.length>4&&await this.editorService.inferTitle(e,r,this.settings,this.settings.apiKey,n),this.updateStatusBar("")}catch(i){E.Platform.isMobile&&new E.Notice(`[ChatGPT MD] Calling ${s.model}. `+i,9e3),this.updateStatusBar(""),console.log(i)}}}),this.addCommand({id:j,name:"Add divider",icon:"minus",editorCallback:(e,r)=>{this.editorService.addHorizontalRule(e,_,this.settings.headingLevel)}}),this.addCommand({id:Z,name:"Add comment block",icon:"comment",editorCallback:(e,r)=>{let s=e.getCursor(),a=s.line,i=s.ch,n=`${J}

${K}`;e.replaceRange(n,s);let l={line:a+1,ch:i};e.setCursor(l)}}),this.addCommand({id:z,name:"Stop streaming",icon:"octagon",editorCallback:(e,r)=>{t.stopStreaming()}}),this.addCommand({id:X,name:"Infer title",icon:"subtitles",editorCallback:async(e,r)=>{let s=this.editorService.getFrontmatter(r,this.settings,this.app);this.updateStatusBar(`[ChatGPT MD] Calling ${s.model}`);let{messages:a}=this.editorService.getMessagesFromEditor(e,this.settings);await this.editorService.inferTitle(e,r,this.settings,this.settings.apiKey,a),this.updateStatusBar("")}}),this.addCommand({id:Q,name:"Create new chat with highlighted text",icon:"highlighter",editorCallback:async(e,r)=>{try{await this.editorService.createNewChatWithHighlightedText(e,this.settings)}catch(s){console.error("[ChatGPT MD] Error in Create new chat with highlighted text",s),new E.Notice("[ChatGPT MD] Error in Create new chat with highlighted text, check console")}}}),this.addCommand({id:ee,name:"Create new chat from template",icon:"layout-template",callback:async()=>{await this.editorService.createNewChatFromTemplate(this.settings,this.editorService.getDate(new Date,this.settings.dateFormat))}}),this.addCommand({id:te,name:"Clear chat (except frontmatter)",icon:"trash",editorCallback:async(e,r)=>{this.editorService.clearChat(e)}}),this.addSettingTab(new L(this.app,this))}onunload(){}async loadSettings(){this.settings=Object.assign({},he,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}updateStatusBar(t){this.statusBarItemEl.setText(`[ChatGPT MD] ${t}`)}};

/* nosourcemap */