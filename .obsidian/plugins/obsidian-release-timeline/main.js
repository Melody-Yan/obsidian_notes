/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/obsidian-dataview/lib/index.js
var require_lib = __commonJS({
  "node_modules/obsidian-dataview/lib/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    require("obsidian");
    var getAPI3 = (app) => {
      var _a;
      if (app)
        return (_a = app.plugins.plugins.dataview) === null || _a === void 0 ? void 0 : _a.api;
      else
        return window["DataviewAPI"];
    };
    var isPluginEnabled3 = (app) => app.plugins.enabledPlugins.has("dataview");
    exports.getAPI = getAPI3;
    exports.isPluginEnabled = isPluginEnabled3;
  }
});

// main.ts
__export(exports, {
  default: () => ReleaseTimeline
});
var import_obsidian3 = __toModule(require("obsidian"));
var import_obsidian_dataview2 = __toModule(require_lib());

// functions.ts
var import_obsidian_dataview = __toModule(require_lib());
var import_obsidian = __toModule(require("obsidian"));
var HelpFunctions = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  createErrorMsg(errorText) {
    const errorTbl = createEl("table", { cls: "release-timeline" });
    const newI = createEl("i", { text: errorText });
    errorTbl.appendChild(newI);
    return errorTbl;
  }
  renderTimeline(content) {
    return __async(this, null, function* () {
      const dv = (0, import_obsidian_dataview.getAPI)();
      if (typeof dv == "undefined") {
        return this.createErrorMsg("Dataview is not installed. The Release Timeline plugin requires Dataview to properly function.");
      }
      var sortOrder = this.parseQuerySortOrder(content);
      try {
        var results;
        var results0 = yield dv.query(content);
        let a = results0.value.values;
        let b = a.filter((x) => typeof x[1] !== "undefined" && x[1] !== null);
        b.forEach((x) => x[1] = (0, import_obsidian.moment)(x[1].toString()).format("YYYY"));
        b = b.filter((x) => x[1] != "Invalid date");
        b.forEach((x) => x[0] = x[0].path.match(/([^\/]+(?=\.)).md/)[1]);
        b.forEach((x) => x[2] == null ? x[2] = x[0] : 1);
        results = dv.array(b);
        results = results.groupBy((x) => x[1]);
        results = results.sort((k) => k.key, sortOrder);
      } catch (error) {
        return this.createErrorMsg("Error from dataview: " + error.message);
      }
      if (results.length == 0) {
        return this.createErrorMsg("No results");
      } else {
        return this.createTimelineTable(results);
      }
    });
  }
  renderTimelineMonth(content) {
    return __async(this, null, function* () {
      const dv = (0, import_obsidian_dataview.getAPI)();
      if (typeof dv == "undefined") {
        return this.createErrorMsg("Dataview is not installed. The Release Timeline plugin requires Dataview to properly function.");
      }
      var sortOrder = this.parseQuerySortOrder(content);
      try {
        var results;
        var results0 = yield dv.query(content);
        let a = results0.value.values;
        let b = a.filter((x) => typeof x[1] !== "undefined" && x[1] !== null);
        b = b.filter((x) => !(typeof x[1] == "number" && x[1] >= 0 && x[1] <= 9999));
        b.forEach((x) => x[1] = (0, import_obsidian.moment)(x[1].toString()).format("YYYY-MM"));
        b = b.filter((x) => x[1] != "Invalid date");
        b.forEach((x) => x[0] = x[0].path.match(/([^\/]+(?=\.)).md/)[1]);
        b.forEach((x) => x[2] == null ? x[2] = x[0] : 1);
        let monthGroup = [];
        for (let i = 0; i < b.length; i++) {
          let item = b[i][1];
          const ind = monthGroup.findIndex((e) => e.yearMonth === item);
          if (ind > -1) {
            monthGroup[ind].values.push([b[i][0], b[i][2]]);
          } else {
            monthGroup.push({ "yearMonth": item, "values": [[b[i][0], b[i][2]]] });
          }
        }
        let yearMonthGroup = [];
        for (let j = 0; j < monthGroup.length; j++) {
          let item = monthGroup[j].yearMonth.substring(0, 4);
          const ind = yearMonthGroup.findIndex((e) => e.year === item);
          if (ind > -1) {
            yearMonthGroup[ind].months.push(monthGroup[j]);
          } else {
            yearMonthGroup.push({ "year": item, "months": [monthGroup[j]] });
          }
        }
        results = sortOrder == "asc" ? yearMonthGroup.sort((a2, b2) => Number(a2.year) - Number(b2.year)) : yearMonthGroup.sort((a2, b2) => Number(b2.year) - Number(a2.year));
      } catch (error) {
        return this.createErrorMsg("Error from dataview: " + error.message);
      }
      if (results.length == 0) {
        return this.createErrorMsg("No results");
      } else {
        return this.createTimelineTableMonth(results, sortOrder);
      }
    });
  }
  createTimelineTableMonth(timeline, sortOrder) {
    const newTbl = document.createElement("table");
    newTbl.classList.add("release-timeline");
    let newTbody = document.createElement("tbody");
    let isLongRow = 0;
    let prevYearExists = false;
    let nextYearExists = timeline[1] !== void 0 ? true : false;
    let nextYear = timeline[1] == void 0 ? void 0 : Number(timeline[1].year);
    timeline.forEach((item, index) => {
      nextYearExists = timeline[index + 1] !== void 0 ? true : false;
      nextYear = timeline[index + 1] == void 0 ? void 0 : Number(timeline[index + 1].year);
      newTbody = this.renderYearMonth(item, prevYearExists, nextYearExists, nextYear, newTbody, sortOrder);
      prevYearExists = true;
    });
    newTbl.appendChild(newTbody);
    return newTbl;
  }
  renderYearMonth(item, prevYearExists, nextYearExists, nextYear, newTbody, sortOrder) {
    newTbody.appendChild(this.createRowSeparatorYearMonth("no-border"));
    let currentYear = item.year;
    if (sortOrder == "desc") {
      var firstMonth = import_obsidian.moment.max(...item.months.map((o) => (0, import_obsidian.moment)(o.yearMonth)));
      var lastMonth = import_obsidian.moment.min(...item.months.map((o) => (0, import_obsidian.moment)(o.yearMonth)));
    } else if (sortOrder == "asc") {
      var firstMonth = import_obsidian.moment.min(...item.months.map((o) => (0, import_obsidian.moment)(o.yearMonth)));
      var lastMonth = import_obsidian.moment.max(...item.months.map((o) => (0, import_obsidian.moment)(o.yearMonth)));
    }
    if (prevYearExists) {
      if (sortOrder == "asc" && firstMonth.format("MM") != "01") {
        firstMonth = (0, import_obsidian.moment)([currentYear, 0]);
      }
      if (sortOrder == "desc" && firstMonth.format("MM") != "12") {
        firstMonth = (0, import_obsidian.moment)([currentYear, 11]);
      }
    }
    ;
    if (nextYearExists) {
      if (sortOrder == "asc" && lastMonth.format("MM") != "12") {
        lastMonth = (0, import_obsidian.moment)([currentYear, 11]);
      }
      if (sortOrder == "desc" && lastMonth.format("MM") != "01") {
        lastMonth = (0, import_obsidian.moment)([currentYear, 0]);
      }
    }
    ;
    let nbRows = Math.abs(firstMonth.diff(lastMonth, "months")) + 1;
    for (let q = 0; q < item.months.length; q++) {
      if (item.months[q].values.length > 1) {
        nbRows += item.months[q].values.length - 1;
      }
    }
    nbRows += 1;
    let monthDiff = Math.abs(firstMonth.diff(lastMonth, "months"));
    let iterator = sortOrder == "asc" ? 1 : -1;
    let isLongRow0 = false;
    let ii = (0, import_obsidian.moment)(firstMonth);
    for (let qq = 0; qq <= monthDiff; qq++) {
      let ind2 = item.months.findIndex((e) => e.yearMonth === ii.format("YYYY-MM"));
      if (isLongRow0) {
        nbRows += 1;
      }
      ;
      if (ind2 > -1) {
        isLongRow0 = false;
        if (item.months[ind2].values.length == 1) {
        } else {
          if (qq != 0) {
            nbRows += 1;
          }
          ;
          isLongRow0 = true;
        }
      } else {
        isLongRow0 = false;
      }
      ii.add(iterator, "months");
    }
    ;
    let yearRow = this.createRowYear({ val: currentYear, cls: "year-header", rowspanNb: nbRows });
    const newYearRow = this.createNewRow(yearRow);
    newTbody.appendChild(newYearRow);
    let i = (0, import_obsidian.moment)(firstMonth);
    let isLongRow = false;
    for (let q = 0; q <= monthDiff; q++) {
      let ind = item.months.findIndex((e) => e.yearMonth === i.format("YYYY-MM"));
      if (isLongRow) {
        newTbody.appendChild(this.createRowSeparator());
      }
      ;
      if (ind > -1) {
        isLongRow = false;
        if (item.months[ind].values.length == 1) {
          const rowYear = this.createRowYear({ val: i.format("MMM"), cls: "year-existing", rowspanNb: 1 });
          const rowItem = this.createRowItem({ fileName: item.months[ind].values[0][0], fileAlias: item.months[ind].values[0][1] });
          const newRow = this.createNewRow(rowYear, rowItem);
          newTbody.appendChild(newRow);
        } else {
          if (q != 0) {
            newTbody.appendChild(this.createRowSeparator());
          }
          ;
          isLongRow = true;
          const rowYear = this.createRowYear({ val: i.format("MMM"), cls: "year-existing", rowspanNb: item.months[ind].values.length });
          const rowItem = this.createRowItem({ fileName: item.months[ind].values[0][0], fileAlias: item.months[ind].values[0][1], cls: "td-first" });
          const newRow = this.createNewRow(rowYear, rowItem);
          newTbody.appendChild(newRow);
          for (let j = 1; j < item.months[ind].values.length; j++) {
            const rowItem2 = this.createRowItem({ fileName: item.months[ind].values[j][0], fileAlias: item.months[ind].values[j][1], cls: "td-next" });
            const newRow2 = this.createNewRow(rowItem2);
            newTbody.appendChild(newRow2);
          }
        }
      } else {
        isLongRow = false;
        const rowYear = this.createRowYear({ val: i.format("MMM"), cls: "year-nonexisting" });
        const rowItem = this.createRowItem({ fileName: "", fileAlias: "" });
        const newRow = this.createNewRow(rowYear, rowItem);
        newTbody.appendChild(newRow);
      }
      i.add(iterator, "months");
    }
    let yearDiff2 = Math.abs(Number(currentYear) - nextYear);
    if (nextYearExists) {
      newTbody.appendChild(this.createRowSeparatorYearMonth("border"));
    } else {
      newTbody.appendChild(this.createRowSeparatorYearMonth("no-border"));
    }
    if (nextYearExists && yearDiff2 > 1) {
      newTbody.appendChild(this.createRowSeparatorYearMonth("no-border"));
      for (let j = 1; j < yearDiff2; j++) {
        let i2 = sortOrder == "asc" ? Number(currentYear) + j : Number(currentYear) - j;
        const rowYear0 = this.createRowYear({ val: "", cls: "year-header" });
        const rowYear1 = this.createRowYear({ val: i2, cls: "year-nonexisting" });
        const rowItem2 = this.createRowItem({ fileName: "", fileAlias: "" });
        const newRow3 = this.createNewRow(rowYear0, rowYear1, rowItem2);
        newTbody.appendChild(newRow3);
      }
      newTbody.appendChild(this.createRowSeparatorYearMonth("border"));
    }
    return newTbody;
  }
  createTimelineTable(timeline) {
    const newTbl = document.createElement("table");
    newTbl.classList.add("release-timeline");
    const newTbody = document.createElement("tbody");
    let isLongRow = 0;
    let minYear = Math.min(...timeline.key.values);
    let maxYear = Math.max(...timeline.key.values);
    if (maxYear - minYear > 5e3 && this.plugin.settings.collapseEmptyYears == false) {
      let errorTbl = this.createErrorMsg('Error: More than 5000 years in selection and "Collapse years" option is not enabled. Enable this option in plugin settings to build the timeline.');
      return errorTbl;
    }
    ;
    let prevYear = Number(timeline[0].key);
    timeline.forEach((item) => {
      let key = Number(item.key);
      let value = item.rows.values.map((k) => [k[0], k[2]]);
      if (isLongRow == 1) {
        newTbody.appendChild(this.createRowSeparator());
      }
      ;
      let yearDiff = Math.abs(key - prevYear);
      let collapseRows = this.plugin.settings.collapseEmptyYears;
      let collapseLimit = Number(this.plugin.settings.collapseLimit) || 2;
      if (yearDiff > 1) {
        if (collapseRows && yearDiff > 2 && yearDiff > collapseLimit) {
          let yearRange = key > prevYear ? `${prevYear + 1} - ${key - 1}` : `${key + 1} - ${prevYear - 1}`;
          const rowYear = this.createRowYear({ val: yearRange, cls: "year-nonexisting" });
          const rowItem = this.createRowItem({ fileName: "", fileAlias: "" });
          const newRow = this.createNewRow(rowYear, rowItem);
          newTbody.appendChild(newRow);
        } else {
          for (let j = 1; j < yearDiff; j++) {
            let i = key > prevYear ? prevYear + j : prevYear - j;
            const rowYear = this.createRowYear({ val: i, cls: "year-nonexisting" });
            const rowItem = this.createRowItem({ fileName: "", fileAlias: "" });
            const newRow = this.createNewRow(rowYear, rowItem);
            newTbody.appendChild(newRow);
          }
          ;
        }
        ;
        isLongRow = 0;
      }
      ;
      if (value.length == 1) {
        isLongRow = 0;
        const rowYear = this.createRowYear({ val: key, cls: "year-existing" });
        const rowItem = this.createRowItem({ fileName: value[0][0], fileAlias: value[0][1] });
        const newRow = this.createNewRow(rowYear, rowItem);
        newTbody.appendChild(newRow);
      } else {
        if (isLongRow == 0) {
          newTbody.appendChild(this.createRowSeparator());
        }
        ;
        isLongRow = 1;
        const rowYear = this.createRowYear({ val: key, cls: "year-existing", rowspanNb: value.length });
        const rowItem = this.createRowItem({ fileName: value[0][0], fileAlias: value[0][1], cls: "td-first" });
        const newRow = this.createNewRow(rowYear, rowItem);
        newTbody.appendChild(newRow);
        for (let i = 1; i < value.length; i++) {
          const rowItem2 = this.createRowItem({ fileName: value[i][0], fileAlias: value[i][1], cls: "td-next" });
          const newRow2 = this.createNewRow(rowItem2);
          newTbody.appendChild(newRow2);
        }
        ;
      }
      ;
      prevYear = key;
    });
    newTbl.appendChild(newTbody);
    return newTbl;
  }
  createRowSeparator({ cls } = {}) {
    const newTdSeparator = createEl("td", { cls: "td-separator" });
    if (typeof cls !== "undefined") {
      newTdSeparator.setAttribute("class", cls);
    }
    ;
    const rowSeparator = createEl("tr");
    rowSeparator.appendChild(newTdSeparator);
    return rowSeparator;
  }
  createRowSeparatorYearMonth(type) {
    const newTdSeparator1 = createEl("td", { cls: "td-separator" });
    const newTdSeparator2 = createEl("td", { cls: "td-separator" });
    const newTdSeparator3 = createEl("td", { cls: "td-separator" });
    if (type == "border") {
      newTdSeparator1.setAttribute("class", "line-separator");
      newTdSeparator2.setAttribute("class", "line-separator");
      newTdSeparator3.setAttribute("class", "line-separator");
    }
    const newRow = this.createNewRow(newTdSeparator1, newTdSeparator2, newTdSeparator3);
    return newRow;
  }
  createRowYear({ val, cls, rowspanNb } = {}) {
    const newTh = createEl("th", { text: val });
    newTh.setAttribute("scope", "row");
    newTh.setAttribute("class", cls);
    if (typeof rowspanNb !== "undefined") {
      newTh.setAttribute("rowspan", rowspanNb);
    }
    ;
    return newTh;
  }
  createRowItem({ fileName, fileAlias, cls } = {}) {
    const newTd = document.createElement("td");
    if (typeof cls !== "undefined") {
      newTd.setAttribute("class", cls);
    }
    ;
    newTd.classList.add("bullet-points");
    const newLink = createEl("a", { cls: "internal-link", text: fileAlias });
    newLink.setAttribute("data-href", fileName);
    newTd.appendChild(newLink);
    return newTd;
  }
  createNewRow(...args) {
    const newRow = document.createElement("tr");
    args.forEach((arg, index) => {
      newRow.appendChild(arg);
    });
    return newRow;
  }
  parseQuerySortOrder(content) {
    let regExSortOrder = /sort(?:.*)? (desc|asc)/;
    let settingsSort = this.plugin.settings.defaultSortOrder;
    content = content.replace(/[\r\n]+/g, " ").toLocaleLowerCase();
    let querySortOrderMatch = content.match(regExSortOrder);
    let querySortOrder;
    if (querySortOrderMatch === null) {
      return settingsSort;
    } else {
      querySortOrder = querySortOrderMatch[1].trim();
      return querySortOrder;
    }
  }
};

// settings.ts
var import_obsidian2 = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  defaultSortOrder: "desc",
  collapseEmptyYears: false,
  bulletPoints: true,
  collapseLimit: "2"
};
var SampleSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Timeline settings" });
    new import_obsidian2.Setting(containerEl).setName("Default sort order").setDesc("Used if sort order is not provided in a query").addDropdown((dropdown) => {
      dropdown.addOption("asc", "Ascending");
      dropdown.addOption("desc", "Descending");
      dropdown.setValue(this.plugin.settings.defaultSortOrder);
      dropdown.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.defaultSortOrder = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Collapse empty years").setDesc("Consecutive empty years will be collapsed into one range like 2000-2018").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.collapseEmptyYears);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.collapseEmptyYears = value;
        yield this.plugin.saveSettings();
      }));
    });
    new import_obsidian2.Setting(containerEl).setName("Collapse empty years limit").setDesc("Minimum number of years present in a block for it to be collapsed").addText((text) => text.setPlaceholder("2").setValue(this.plugin.settings.collapseLimit).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.collapseLimit = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian2.Setting(containerEl).setName("Bullet points").setDesc("Enable bullet points for years with multiple items").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.bulletPoints);
      toggle.onChange((value) => __async(this, null, function* () {
        this.plugin.settings.bulletPoints = value;
        yield this.plugin.saveSettings();
        this.updateCSS();
      }));
    });
  }
  updateCSS() {
    let bulletOption = this.plugin.settings.bulletPoints;
    let matches = document.querySelectorAll(".td-first, .td-next");
    matches.forEach(function(match) {
      match.classList.toggle("bullet-points", bulletOption);
    });
  }
};

// main.ts
var ReleaseTimeline = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    this.HelpFunctions = new HelpFunctions(this);
  }
  onload() {
    return __async(this, null, function* () {
      this.app.workspace.onLayoutReady(() => {
        const isDataviewInstalled = !!(0, import_obsidian_dataview2.getAPI)();
        if (!isDataviewInstalled) {
          new import_obsidian3.Notice("The Release Timeline plugin requires Dataview to properly function.");
        }
      });
      yield this.loadSettings();
      console.log("loading obsidian-release-timeline");
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerMarkdownCodeBlockProcessor("release-timeline", (content, el, ctx) => __async(this, null, function* () {
        let timelineTable = yield this.HelpFunctions.renderTimeline(content);
        el.appendChild(timelineTable);
        let bulletOption = this.settings.bulletPoints;
        let matches = el.querySelectorAll(".td-first, .td-next");
        matches.forEach(function(match) {
          match.classList.toggle("bullet-points", bulletOption);
        });
      }));
      this.registerMarkdownCodeBlockProcessor("release-timeline-month", (content, el, ctx) => __async(this, null, function* () {
        let timelineTable = yield this.HelpFunctions.renderTimelineMonth(content);
        el.appendChild(timelineTable);
        let bulletOption = this.settings.bulletPoints;
        let matches = el.querySelectorAll(".td-first, .td-next");
        matches.forEach(function(match) {
          match.classList.toggle("bullet-points", bulletOption);
        });
      }));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
